(()=>{"use strict";class t{constructor(t){this.arr=t,this.root=null}}function n(t){if(t.length<=1)return t;const l=Math.floor(t.length/2);return function(t,n){let l=0,o=0;const e=[];for(;l<t.length&&o<n.length;)t[l]===n[o]?(e.push(t[l]),l+=1,o+=1):t[l]<n[o]?(e.push(t[l]),l+=1):(e.push(n[o]),o+=1);for(;l<t.length;)e.push(t[l]),l+=1;for(;o<n.length;)e.push(n[o]),o+=1;return e}(n(t.slice(0,l)),n(t.slice(l)))}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function o(t,n,e){if(n>e)return null;const r=Math.floor((n+e)/2),h=new l(t[r]);return h.left=o(t,n,r-1),h.right=o(t,r+1,e),h}const e=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",l=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t&&(null!==t.right&&e(t.right,`${n}${l?"│   ":"    "}`,!1),console.log(`${n}${l?"└── ":"┌── "}${t.data}`),null!==t.left&&e(t.left,`${n}${l?"    ":"│   "}`,!0))},r=(t,n)=>null===n?n=new l(t):(t<n.data?n.left=r(t,n.left):t>n.data&&(n.right=r(t,n.right)),n),h=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;void 0!==t&&(l(t),t.left&&n.push(t.left),t.right&&n.push(t.right),h(n.shift(),n,l))};function i(t){console.log(t.data)}!function(){const l=n([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]),u=new t(l),s=l.length-1;u.root=o(l,0,s),r(127,u.root),h(u.root,[],i),e(u.root)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,