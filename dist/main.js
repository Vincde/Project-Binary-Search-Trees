(()=>{"use strict";class t{constructor(t){this.arr=t,this.root=null}}function n(t){if(t.length<=1)return t;const l=Math.floor(t.length/2);return function(t,n){let l=0,o=0;const r=[];for(;l<t.length&&o<n.length;)t[l]===n[o]?(r.push(t[l]),l+=1,o+=1):t[l]<n[o]?(r.push(t[l]),l+=1):(r.push(n[o]),o+=1);for(;l<t.length;)r.push(t[l]),l+=1;for(;o<n.length;)r.push(n[o]),o+=1;return r}(n(t.slice(0,l)),n(t.slice(l)))}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function o(t,n,r){if(n>r)return null;const e=Math.floor((n+r)/2),h=new l(t[e]);return h.left=o(t,n,e-1),h.right=o(t,e+1,r),h}const r=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",l=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t&&(null!==t.right&&r(t.right,`${n}${l?"│   ":"    "}`,!1),console.log(`${n}${l?"└── ":"┌── "}${t.data}`),null!==t.left&&r(t.left,`${n}${l?"    ":"│   "}`,!0))},e=(t,n)=>null===n?n=new l(t):(t<n.data?n.left=e(t,n.left):t>n.data&&(n.right=e(t,n.right)),n);!function(){const l=n([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]),h=new t(l),s=l.length-1;h.root=o(l,0,s),e(2233,h.root),console.log(h),r(h.root)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ2UsTUFBTUEsRUFDbkJDLFdBQUFBLENBQVlDLEdBQ1ZDLEtBQUtELElBQU1BLEVBQ1hDLEtBQUtDLEtBQU8sSUFDZCxFQW1DSyxTQUFTQyxFQUFLSCxHQUNuQixHQUFJQSxFQUFJSSxRQUFVLEVBQUcsT0FBT0osRUFFNUIsTUFBTUssRUFBTUMsS0FBS0MsTUFBTVAsRUFBSUksT0FBUyxHQUlwQyxPQXZDSyxTQUFlSSxFQUFNQyxHQUMxQixJQUFJQyxFQUFJLEVBQ0pDLEVBQUksRUFDUixNQUFNQyxFQUFNLEdBRVosS0FBT0YsRUFBSUYsRUFBS0osUUFBVU8sRUFBSUYsRUFBTUwsUUFDOUJJLEVBQUtFLEtBQU9ELEVBQU1FLElBQ3BCQyxFQUFJQyxLQUFLTCxFQUFLRSxJQUNkQSxHQUFLLEVBQ0xDLEdBQUssR0FDSUgsRUFBS0UsR0FBS0QsRUFBTUUsSUFDekJDLEVBQUlDLEtBQUtMLEVBQUtFLElBQ2RBLEdBQUssSUFFTEUsRUFBSUMsS0FBS0osRUFBTUUsSUFDZkEsR0FBSyxHQUlULEtBQU9ELEVBQUlGLEVBQUtKLFFBQ2RRLEVBQUlDLEtBQUtMLEVBQUtFLElBQ2RBLEdBQUssRUFHUCxLQUFPQyxFQUFJRixFQUFNTCxRQUNmUSxFQUFJQyxLQUFLSixFQUFNRSxJQUNmQSxHQUFLLEVBR1AsT0FBT0MsQ0FDVCxDQVNTRSxDQUhNWCxFQUFLSCxFQUFJZSxNQUFNLEVBQUdWLElBQ2pCRixFQUFLSCxFQUFJZSxNQUFNVixJQUcvQixDQzdDQSxNQUFNVyxFQUNKakIsV0FBQUEsQ0FBWWtCLEdBQ1ZoQixLQUFLZ0IsS0FBT0EsRUFDWmhCLEtBQUtPLEtBQU8sS0FDWlAsS0FBS1EsTUFBUSxJQUNmLEVBR0YsU0FBU1MsRUFBV2xCLEVBQUttQixFQUFPQyxHQUM5QixHQUFJRCxFQUFRQyxFQUFLLE9BQU8sS0FFeEIsTUFBTWYsRUFBTUMsS0FBS0MsT0FBT1ksRUFBUUMsR0FBTyxHQUVqQ2xCLEVBQU8sSUFBSWMsRUFBS2hCLEVBQUlLLElBSzFCLE9BSEFILEVBQUtNLEtBQU9VLEVBQVdsQixFQUFLbUIsRUFBT2QsRUFBTSxHQUN6Q0gsRUFBS08sTUFBUVMsRUFBV2xCLEVBQUtLLEVBQU0sRUFBR2UsR0FFL0JsQixDQUNULENBRUEsTUFBTW1CLEVBQWMsU0FBQ0MsR0FBcUMsSUFBL0JDLEVBQU1DLFVBQUFwQixPQUFBLFFBQUFxQixJQUFBRCxVQUFBLEdBQUFBLFVBQUEsR0FBRyxHQUFJRSxJQUFNRixVQUFBcEIsT0FBQSxRQUFBcUIsSUFBQUQsVUFBQSxLQUFBQSxVQUFBLEdBQy9CLE9BQVRGLElBR2UsT0FBZkEsRUFBS2IsT0FDUFksRUFBWUMsRUFBS2IsTUFBUSxHQUFFYyxJQUFTRyxFQUFTLE9BQVMsVUFBVSxHQUVsRUMsUUFBUUMsSUFBSyxHQUFFTCxJQUFTRyxFQUFTLE9BQVMsU0FBU0osRUFBS0wsUUFDdEMsT0FBZEssRUFBS2QsTUFDUGEsRUFBWUMsRUFBS2QsS0FBTyxHQUFFZSxJQUFTRyxFQUFTLE9BQVMsVUFBVSxHQUVuRSxFQUVNRyxFQUFTQSxDQUFDQyxFQUFPNUIsSUFDUixPQUFUQSxFQUVGQSxFQUFPLElBQUljLEVBQUtjLElBR2RBLEVBQVE1QixFQUFLZSxLQUVmZixFQUFLTSxLQUFPcUIsRUFBT0MsRUFBTzVCLEVBQUtNLE1BQ3RCc0IsRUFBUTVCLEVBQUtlLE9BRXRCZixFQUFLTyxNQUFRb0IsRUFBT0MsRUFBTzVCLEVBQUtPLFFBRzNCUCxJQUdULFdBQ0UsTUFFTTZCLEVBQVM1QixFQUZILENBQUMsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksS0FBTSxNQUluREQsRUFBTyxJQUFJSixFQUFLaUMsR0FHaEJYLEVBQU1XLEVBQU8zQixPQUFTLEVBRTVCRixFQUFLQSxLQUFPZ0IsRUFBV2EsRUFIVCxFQUd3QlgsR0FDdENTLEVBQU8sS0FBTTNCLEVBQUtBLE1BQ2xCeUIsUUFBUUMsSUFBSTFCLEdBQ1ptQixFQUFZbkIsRUFBS0EsS0FDbkIsQ0FFQThCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJkZXYtdGVtcGxhdGUvLi9zcmMvdHJlZS5qcyIsIndlYnBhY2s6Ly93ZWJkZXYtdGVtcGxhdGUvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWUge1xuICBjb25zdHJ1Y3RvcihhcnIpIHtcbiAgICB0aGlzLmFyciA9IGFycjtcbiAgICB0aGlzLnJvb3QgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShsZWZ0LCByaWdodCkge1xuICBsZXQgaSA9IDA7XG4gIGxldCBqID0gMDtcbiAgY29uc3QgcmVzID0gW107XG5cbiAgd2hpbGUgKGkgPCBsZWZ0Lmxlbmd0aCAmJiBqIDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgaWYgKGxlZnRbaV0gPT09IHJpZ2h0W2pdKSB7XG4gICAgICByZXMucHVzaChsZWZ0W2ldKTtcbiAgICAgIGkgKz0gMTtcbiAgICAgIGogKz0gMTtcbiAgICB9IGVsc2UgaWYgKGxlZnRbaV0gPCByaWdodFtqXSkge1xuICAgICAgcmVzLnB1c2gobGVmdFtpXSk7XG4gICAgICBpICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5wdXNoKHJpZ2h0W2pdKTtcbiAgICAgIGogKz0gMTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoaSA8IGxlZnQubGVuZ3RoKSB7XG4gICAgcmVzLnB1c2gobGVmdFtpXSk7XG4gICAgaSArPSAxO1xuICB9XG5cbiAgd2hpbGUgKGogPCByaWdodC5sZW5ndGgpIHtcbiAgICByZXMucHVzaChyaWdodFtqXSk7XG4gICAgaiArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnQoYXJyKSB7XG4gIGlmIChhcnIubGVuZ3RoIDw9IDEpIHJldHVybiBhcnI7XG5cbiAgY29uc3QgbWlkID0gTWF0aC5mbG9vcihhcnIubGVuZ3RoIC8gMik7XG4gIGNvbnN0IGxlZnQgPSBzb3J0KGFyci5zbGljZSgwLCBtaWQpKTtcbiAgY29uc3QgcmlnaHQgPSBzb3J0KGFyci5zbGljZShtaWQpKTtcblxuICByZXR1cm4gbWVyZ2UobGVmdCwgcmlnaHQpO1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1uYW1lZC1hcy1kZWZhdWx0LCBpbXBvcnQvbm8tbmFtZWQtYXMtZGVmYXVsdC1tZW1iZXIsIGltcG9ydC9leHRlbnNpb25zXG5pbXBvcnQgVHJlZSwgeyBzb3J0LCBtZXJnZSB9IGZyb20gXCIuL3RyZWUuanNcIjtcblxuY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMubGVmdCA9IG51bGw7XG4gICAgdGhpcy5yaWdodCA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluYXJ5VHJlZShhcnIsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcblxuICBjb25zdCByb290ID0gbmV3IE5vZGUoYXJyW21pZF0pO1xuXG4gIHJvb3QubGVmdCA9IGJpbmFyeVRyZWUoYXJyLCBzdGFydCwgbWlkIC0gMSk7XG4gIHJvb3QucmlnaHQgPSBiaW5hcnlUcmVlKGFyciwgbWlkICsgMSwgZW5kKTtcblxuICByZXR1cm4gcm9vdDtcbn1cblxuY29uc3QgcHJldHR5UHJpbnQgPSAobm9kZSwgcHJlZml4ID0gXCJcIiwgaXNMZWZ0ID0gdHJ1ZSkgPT4ge1xuICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobm9kZS5yaWdodCAhPT0gbnVsbCkge1xuICAgIHByZXR0eVByaW50KG5vZGUucmlnaHQsIGAke3ByZWZpeH0ke2lzTGVmdCA/IFwi4pSCICAgXCIgOiBcIiAgICBcIn1gLCBmYWxzZSk7XG4gIH1cbiAgY29uc29sZS5sb2coYCR7cHJlZml4fSR7aXNMZWZ0ID8gXCLilJTilIDilIAgXCIgOiBcIuKUjOKUgOKUgCBcIn0ke25vZGUuZGF0YX1gKTtcbiAgaWYgKG5vZGUubGVmdCAhPT0gbnVsbCkge1xuICAgIHByZXR0eVByaW50KG5vZGUubGVmdCwgYCR7cHJlZml4fSR7aXNMZWZ0ID8gXCIgICAgXCIgOiBcIuKUgiAgIFwifWAsIHRydWUpO1xuICB9XG59O1xuXG5jb25zdCBpbnNlcnQgPSAodmFsdWUsIHJvb3QpID0+IHtcbiAgaWYgKHJvb3QgPT09IG51bGwpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByb290ID0gbmV3IE5vZGUodmFsdWUpO1xuICAgIHJldHVybiByb290O1xuICB9XG4gIGlmICh2YWx1ZSA8IHJvb3QuZGF0YSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHJvb3QubGVmdCA9IGluc2VydCh2YWx1ZSwgcm9vdC5sZWZ0KTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA+IHJvb3QuZGF0YSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHJvb3QucmlnaHQgPSBpbnNlcnQodmFsdWUsIHJvb3QucmlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3Q7XG59O1xuXG5mdW5jdGlvbiBzdGFydEl0KCkge1xuICBjb25zdCBhcnIgPSBbMSwgNywgNCwgMjMsIDgsIDksIDQsIDMsIDUsIDcsIDksIDY3LCA2MzQ1LCAzMjRdOyAvLyBUSElTIElTIE5PVCBUSEUgQVJSQVkgVEhBVCBHRVRTIFBSSU5URUQgT1VUXG5cbiAgY29uc3QgbmV3QXJyID0gc29ydChhcnIpO1xuXG4gIGNvbnN0IHJvb3QgPSBuZXcgVHJlZShuZXdBcnIpO1xuXG4gIGNvbnN0IHN0YXJ0ID0gMDtcbiAgY29uc3QgZW5kID0gbmV3QXJyLmxlbmd0aCAtIDE7XG5cbiAgcm9vdC5yb290ID0gYmluYXJ5VHJlZShuZXdBcnIsIHN0YXJ0LCBlbmQpO1xuICBpbnNlcnQoMjIzMywgcm9vdC5yb290KTtcbiAgY29uc29sZS5sb2cocm9vdCk7XG4gIHByZXR0eVByaW50KHJvb3Qucm9vdCk7XG59XG5cbnN0YXJ0SXQoKTtcbiJdLCJuYW1lcyI6WyJUcmVlIiwiY29uc3RydWN0b3IiLCJhcnIiLCJ0aGlzIiwicm9vdCIsInNvcnQiLCJsZW5ndGgiLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJsZWZ0IiwicmlnaHQiLCJpIiwiaiIsInJlcyIsInB1c2giLCJtZXJnZSIsInNsaWNlIiwiTm9kZSIsImRhdGEiLCJiaW5hcnlUcmVlIiwic3RhcnQiLCJlbmQiLCJwcmV0dHlQcmludCIsIm5vZGUiLCJwcmVmaXgiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJpc0xlZnQiLCJjb25zb2xlIiwibG9nIiwiaW5zZXJ0IiwidmFsdWUiLCJuZXdBcnIiLCJzdGFydEl0Il0sInNvdXJjZVJvb3QiOiIifQ==