(()=>{"use strict";class t{constructor(t){this.arr=t,this.root=null}}function l(t){if(t.length<=1)return t;const n=Math.floor(t.length/2);return function(t,l){let n=0,r=0;const e=[];for(;n<t.length&&r<l.length;)t[n]===l[r]?(e.push(t[n]),n+=1,r+=1):t[n]<l[r]?(e.push(t[n]),n+=1):(e.push(l[r]),r+=1);for(;n<t.length;)e.push(t[n]),n+=1;for(;r<l.length;)e.push(l[r]),r+=1;return e}(l(t.slice(0,n)),l(t.slice(n)))}class n{constructor(t){this.data=t,this.left=null,this.right=null}}function r(t,l,e){if(l>e)return null;const o=Math.floor((l+e)/2),i=new n(t[o]);return i.left=r(t,l,o-1),i.right=r(t,o+1,e),i}const e=function(t){let l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t&&(null!==t.right&&e(t.right,`${l}${n?"│   ":"    "}`,!1),console.log(`${l}${n?"└── ":"┌── "}${t.data}`),null!==t.left&&e(t.left,`${l}${n?"    ":"│   "}`,!0))},o=(t,l)=>null===l?l=new n(t):(t<l.data?l.left=o(t,l.left):t>l.data&&(l.right=o(t,l.right)),l),i=(t,l)=>{if(null===l)return l;if(t<l.data)l.left=i(t,l.left);else if(t>l.data)l.right=i(t,l.right);else{if(null===l.left)return l.right;if(null===l.right)return l.left;l.data=(t=>{let l=t.data;for(;null!==t.left;)l=t.left.data,t=t.left;return l})(l.right),l.right=i(l.data,l.right)}return l};!function(){const n=l([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]),u=new t(n),h=n.length-1;u.root=r(n,0,h),o(127,u.root),i(6345,u.root),e(u.root)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,