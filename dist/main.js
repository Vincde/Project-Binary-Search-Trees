(()=>{"use strict";class t{constructor(t){this.arr=t,this.root=null}}function o(t){if(t.length<=1)return t;const r=Math.floor(t.length/2);return function(t,o){let r=0,n=0;const l=[];for(;r<t.length&&n<o.length;)t[r]===o[n]?(l.push(t[r]),r+=1,n+=1):t[r]<o[n]?(l.push(t[r]),r+=1):(l.push(o[n]),n+=1);for(;r<t.length;)l.push(t[r]),r+=1;for(;n<o.length;)l.push(o[n]),n+=1;return l}(o(t.slice(0,r)),o(t.slice(r)))}class r{constructor(t){this.data=t,this.left=null,this.right=null}}function n(t,o,l){if(o>l)return null;const e=Math.floor((o+l)/2),h=new r(t[e]);return h.left=n(t,o,e-1),h.right=n(t,e+1,l),h}const l=(t,o)=>null===o?o=new r(t):(t<o.data?o.left=l(t,o.left):t>o.data&&(o.right=l(t,o.right)),o),e=t=>{if(null==t)return-1;const o=e(t.left),r=e(t.right);return Math.max(o,r)+1};function h(t){return null===t?0:Math.max(e(t.left),e(t.right))+1}const u=t=>{if(null===t)return!0;const o=h(t.left),r=h(t.right);return Math.abs(o-r)<=1&&!0===u(t.left)&&!0===u(t.right)},s=t=>{let o=[];return null===t||(o=s(t.left),o=s(t.right),o.push(t.data)),o};!function(){const r=o(Array.from({length:100},(()=>Math.floor(100*Math.random())))),e=new t(r),h=r.length-1;e.root=n(r,0,h),console.log(u(e.root)),l(234,e.root),l(2434,e.root),l(25674,e.root),l(22324,e.root),l(89894,e.root),l(21224,e.root),l(2554,e.root),l(122344,e.root),l(2789994,e.root),l(22222,e.root),console.log(u(e.root));let i=[];var c;i=s(e.root),e.root=(e.root,n(c=o(c=i),0,c.length-1)),console.log(u(e.root))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,