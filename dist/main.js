(()=>{"use strict";class t{constructor(t){this.arr=t,this.root=null}}function l(t){if(t.length<=1)return t;const n=Math.floor(t.length/2);return function(t,l){let n=0,o=0;const r=[];for(;n<t.length&&o<l.length;)t[n]===l[o]?(r.push(t[n]),n+=1,o+=1):t[n]<l[o]?(r.push(t[n]),n+=1):(r.push(l[o]),o+=1);for(;n<t.length;)r.push(t[n]),n+=1;for(;o<l.length;)r.push(l[o]),o+=1;return r}(l(t.slice(0,n)),l(t.slice(n)))}class n{constructor(t){this.data=t,this.left=null,this.right=null}}function o(t,l,r){if(l>r)return null;const e=Math.floor((l+r)/2),u=new n(t[e]);return u.left=o(t,l,e-1),u.right=o(t,e+1,r),u}const r=function(t){let l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t&&(null!==t.right&&r(t.right,`${l}${n?"│   ":"    "}`,!1),console.log(`${l}${n?"└── ":"┌── "}${t.data}`),null!==t.left&&r(t.left,`${l}${n?"    ":"│   "}`,!0))},e=(t,l)=>null===l?l=new n(t):(t<l.data?l.left=e(t,l.left):t>l.data&&(l.right=e(t,l.right)),l);!function(){const n=l([1,7,4,23,8,9,4,3,5,7,9,67,6345,324]),u=new t(n),h=n.length-1;u.root=o(n,0,h),e(127,u.root),console.log(function(t){let l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=[],o=[];let r=t;for(;void 0!==r;)null===l?n.push(r.data):l(r),null!==r.left&&o.push(r.left),null!==r.right&&o.push(r.right),r=o.shift();if(null===l)return n}(u.root)),r(u.root)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,